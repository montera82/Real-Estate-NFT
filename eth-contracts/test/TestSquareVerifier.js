// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

const Verifier = artifacts.require('./SquareVerifier');
const fs = require('fs');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
    
// Test verification with incorrect proof
contract("SquareVerifier",  (accounts) => {

    describe("verifyTx", () => {
        beforeEach(async () => {
            this.contract = await Verifier.deployed();
        });

        it("should return true for correct proof", async () => {
            const file = fs.readFileSync("../zokrates/code/square/proof.json").toString();
            const proofObj = JSON.parse(file);
            const { proof, inputs } = proofObj;
            //console.log(file)
            const result  = await this.contract.verifyTx.call(proof.a, proof.b, proof.c, inputs );
            assert.equal(result, true);
        })

        it("should return false for incorrect proof", async () => {
            const file = fs.readFileSync("../zokrates/code/square/proof-fake.json").toString();
            const proofObj = JSON.parse(file);
            const { proof, inputs } = proofObj;
            const result  = await this.contract.verifyTx.call(proof.a, proof.b, proof.c, inputs );
            assert.equal(result, false);
        })
    }) 

} )